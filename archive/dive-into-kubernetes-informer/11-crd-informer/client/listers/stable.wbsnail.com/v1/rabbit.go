/*
Copyright wbsnail.com.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/wbsnail/articles/archive/dive-into-kubernetes-informer/11-crd-informer/api/stable.wbsnail.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RabbitLister helps list Rabbits.
// All objects returned here must be treated as read-only.
type RabbitLister interface {
	// List lists all Rabbits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Rabbit, err error)
	// Rabbits returns an object that can list and get Rabbits.
	Rabbits(namespace string) RabbitNamespaceLister
	RabbitListerExpansion
}

// rabbitLister implements the RabbitLister interface.
type rabbitLister struct {
	indexer cache.Indexer
}

// NewRabbitLister returns a new RabbitLister.
func NewRabbitLister(indexer cache.Indexer) RabbitLister {
	return &rabbitLister{indexer: indexer}
}

// List lists all Rabbits in the indexer.
func (s *rabbitLister) List(selector labels.Selector) (ret []*v1.Rabbit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Rabbit))
	})
	return ret, err
}

// Rabbits returns an object that can list and get Rabbits.
func (s *rabbitLister) Rabbits(namespace string) RabbitNamespaceLister {
	return rabbitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RabbitNamespaceLister helps list and get Rabbits.
// All objects returned here must be treated as read-only.
type RabbitNamespaceLister interface {
	// List lists all Rabbits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Rabbit, err error)
	// Get retrieves the Rabbit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Rabbit, error)
	RabbitNamespaceListerExpansion
}

// rabbitNamespaceLister implements the RabbitNamespaceLister
// interface.
type rabbitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Rabbits in the indexer for a given namespace.
func (s rabbitNamespaceLister) List(selector labels.Selector) (ret []*v1.Rabbit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Rabbit))
	})
	return ret, err
}

// Get retrieves the Rabbit from the indexer for a given namespace and name.
func (s rabbitNamespaceLister) Get(name string) (*v1.Rabbit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("rabbit"), name)
	}
	return obj.(*v1.Rabbit), nil
}
